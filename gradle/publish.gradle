apply plugin: 'maven-publish'

def getBranch() {
    def process = 'git branch --show-current'.execute()
    process.waitFor()
    return process.text.trim()
}

def getHash() {
    def process = 'git rev-parse HEAD'.execute()
    process.waitFor()
    return process.text.trim()
}

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from "${project.rootDir}/src/main/java"
    into "${project.rootDir}/build/adjustedSrc"
    filter(ReplaceTokens, tokens: [VERSION: this.version])
}

task compileForRelease(type: JavaCompile, dependsOn: sourcesForRelease) {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    destinationDir = file('build/adjustedClasses')
}

tasks.publish.dependsOn(compileForRelease)

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes (
                'Build-Jdk': "${System.properties['java.vendor']} ${System.properties['java.vm.version']}",
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Git-Branch': getBranch(),
                'Git-Hash': getHash()
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${project.findProperty("GITHUB_REPOSITORY")?: System.getenv("GITHUB_REPOSITORY")}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
